#include "StdAfx.h"
#include "DeviceFormats.h"

bool DeviceFormats::IsTypeless(DXGIFormat format)
{
	switch (format)
	{
		//128 bits
	case DXGI_FORMAT_R32G32B32A32_TYPELESS:
	case DXGI_FORMAT_R32G32B32_TYPELESS:

		//64 bits
	case DXGI_FORMAT_R16G16B16A16_TYPELESS:
	case DXGI_FORMAT_R32G32_TYPELESS:
	case DXGI_FORMAT_R32G8X24_TYPELESS:
	case DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS:
	case DXGI_FORMAT_X32_TYPELESS_G8X24_UINT:

		//32 bits
	case DXGI_FORMAT_R10G10B10A2_TYPELESS:
	case DXGI_FORMAT_R8G8B8A8_TYPELESS:
	case DXGI_FORMAT_R16G16_TYPELESS:
	case DXGI_FORMAT_R32_TYPELESS:
	case DXGI_FORMAT_R24G8_TYPELESS:
	case DXGI_FORMAT_R24_UNORM_X8_TYPELESS:
	case DXGI_FORMAT_X24_TYPELESS_G8_UINT:
#if RENDERER_VK
	case DXGI_FORMAT_R16G8X8_TYPELESS:
	case DXGI_FORMAT_R24X8_TYPELESS:
#endif

		//16 bits
	case DXGI_FORMAT_R8G8_TYPELESS:
	case DXGI_FORMAT_R16_TYPELESS:

		//8 bits
	case DXGI_FORMAT_R8_TYPELESS:

		//block formats
	case DXGI_FORMAT_BC1_TYPELESS:
	case DXGI_FORMAT_BC2_TYPELESS:
	case DXGI_FORMAT_BC3_TYPELESS:
	case DXGI_FORMAT_BC4_TYPELESS:
	case DXGI_FORMAT_BC5_TYPELESS:

#if !PLATFORM_ORBIS
	case DXGI_FORMAT_BC6H_TYPELESS:
#endif
	case DXGI_FORMAT_BC7_TYPELESS:
		return true;

	default:
		break;
	}

	return false;
}

bool DeviceFormats::IsDepthStencil(DXGIFormat format)
{
	switch (format)
	{
#if RENDERER_VK
	case DXGI_FORMAT_R8_TYPELESS:
	case DXGI_FORMAT_R8_UINT:
	case DXGI_FORMAT_S8_UINT:
#endif

	case DXGI_FORMAT_R16_TYPELESS:
	case DXGI_FORMAT_R16_UNORM:
	case DXGI_FORMAT_D16_UNORM:

#if RENDERER_VK
	case DXGI_FORMAT_R16G8X8_TYPELESS:
	case DXGI_FORMAT_D16_UNORM_S8_UINT:
	case DXGI_FORMAT_R24X8_TYPELESS:
	case DXGI_FORMAT_D24_UNORM:
#endif

#if RENDERER_GNM
	case DXGI_FORMAT_R16G8_TYPELESS:
	case DXGI_FORMAT_D16_UNORM_S8_UINT:
#endif

	case DXGI_FORMAT_R24G8_TYPELESS:
	case DXGI_FORMAT_R24_UNORM_X8_TYPELESS:
	case DXGI_FORMAT_X24_TYPELESS_G8_UINT:
	case DXGI_FORMAT_D24_UNORM_S8_UINT:

	case DXGI_FORMAT_R32_TYPELESS:
	case DXGI_FORMAT_R32_FLOAT:
	case DXGI_FORMAT_D32_FLOAT:

	case DXGI_FORMAT_R32G8X24_TYPELESS:
	case DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS:
	case DXGI_FORMAT_X32_TYPELESS_G8X24_UINT:
	case DXGI_FORMAT_D32_FLOAT_S8X24_UINT:
		return true;

	default:
		break;
	}

	return false;
}

bool DeviceFormats::IsSRGBReadable(DXGIFormat format)
{
	switch (format)
	{
	case DXGI_FORMAT_R8G8B8A8_UNORM:
		return true;
	case DXGI_FORMAT_B8G8R8A8_UNORM:
		return true;
	case DXGI_FORMAT_B8G8R8X8_UNORM:
		return true;

	case DXGI_FORMAT_BC1_UNORM:
		return true;
	case DXGI_FORMAT_BC2_UNORM:
		return true;
	case DXGI_FORMAT_BC3_UNORM:
		return true;
	case DXGI_FORMAT_BC7_UNORM:
		return true;

#if RENDERER_VK
	case DXGI_FORMAT_ETC2_UNORM:
		return true;
	case DXGI_FORMAT_ETC2A_UNORM:
		return true;
	case DXGI_FORMAT_ASTC_4x4_UNORM:
		return true;
#endif

	default:
		break;
	}

	return false;
}

bool DeviceFormats::IsSRGBFormat(DXGIFormat format)
{
	switch (format)
	{
	case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
	case DXGI_FORMAT_B8G8R8A8_UNORM_SRGB:
	case DXGI_FORMAT_B8G8R8X8_UNORM_SRGB:
	case DXGI_FORMAT_BC1_UNORM_SRGB:
	case DXGI_FORMAT_BC2_UNORM_SRGB:
	case DXGI_FORMAT_BC3_UNORM_SRGB:
	case DXGI_FORMAT_BC7_UNORM_SRGB:
		return true;
	}

	return false;
}

bool DeviceFormats::IsSRGBFormat(TextureFormat format)
{
	return IsSRGBFormat(DeviceFormats::ConvertFromTexFormat(format));
}

DXGIFormat DeviceFormats::ConvertFromTexFormat(TextureFormat format)
{
	switch (format)
	{
	case TextureFormat::R8G8B8A8:
		return DXGI_FORMAT_R8G8B8A8_UNORM;
	case TextureFormat::R8G8B8A8S:
		return DXGI_FORMAT_R8G8B8A8_SNORM;

	case TextureFormat::A8:
		return DXGI_FORMAT_A8_UNORM;
	case TextureFormat::R8:
		return DXGI_FORMAT_R8_UNORM;
	case TextureFormat::R8S:
		return DXGI_FORMAT_R8_SNORM;
	case TextureFormat::R16:
		return DXGI_FORMAT_R16_UNORM;
	case TextureFormat::R16S:
		return DXGI_FORMAT_R16_SNORM;
	case TextureFormat::R16F:
		return DXGI_FORMAT_R16_FLOAT;
	case TextureFormat::R32F:
		return DXGI_FORMAT_R32_FLOAT;
	case TextureFormat::R8G8:
		return DXGI_FORMAT_R8G8_UNORM;
	case TextureFormat::R8G8S:
		return DXGI_FORMAT_R8G8_SNORM;
	case TextureFormat::R16G16:
		return DXGI_FORMAT_R16G16_UNORM;
	case TextureFormat::R16G16S:
		return DXGI_FORMAT_R16G16_SNORM;
	case TextureFormat::R16G16F:
		return DXGI_FORMAT_R16G16_FLOAT;
	case TextureFormat::R32G32F:
		return DXGI_FORMAT_R32G32_FLOAT;
	case TextureFormat::R16G16B16A16:
		return DXGI_FORMAT_R16G16B16A16_UNORM;
	case TextureFormat::R16G16B16A16S:
		return DXGI_FORMAT_R16G16B16A16_SNORM;
	case TextureFormat::R16G16B16A16F:
		return DXGI_FORMAT_R16G16B16A16_FLOAT;
	case TextureFormat::R32G32B32A32F:
		return DXGI_FORMAT_R32G32B32A32_FLOAT;

	case TextureFormat::BC1:
		return DXGI_FORMAT_BC1_UNORM;
	case TextureFormat::BC2:
		return DXGI_FORMAT_BC2_UNORM;
	case TextureFormat::BC3:
		return DXGI_FORMAT_BC3_UNORM;
	case TextureFormat::BC4U:
		return DXGI_FORMAT_BC4_UNORM;
	case TextureFormat::BC4S:
		return DXGI_FORMAT_BC4_SNORM;
	case TextureFormat::BC5U:
		return DXGI_FORMAT_BC5_UNORM;
	case TextureFormat::BC5S:
		return DXGI_FORMAT_BC5_SNORM;
	case TextureFormat::BC6UH:
		return DXGI_FORMAT_BC6H_UF16;
	case TextureFormat::BC6SH:
		return DXGI_FORMAT_BC6H_SF16;
	case TextureFormat::BC7:
		return DXGI_FORMAT_BC7_UNORM;

	case TextureFormat::D16:
		return DXGI_FORMAT_D16_UNORM;
	case TextureFormat::D24S8:
		return DXGI_FORMAT_D24_UNORM_S8_UINT;
	case TextureFormat::D32F:
		return DXGI_FORMAT_D32_FLOAT;
	case TextureFormat::D32FS8:
		return DXGI_FORMAT_D32_FLOAT_S8X24_UINT;

		// only available as hardware format under DX9
	case TextureFormat::B8G8R8:
		return DXGI_FORMAT_UNKNOWN;
	case TextureFormat::B8G8R8X8:
		return DXGI_FORMAT_B8G8R8X8_UNORM;
	case TextureFormat::B8G8R8A8:
		return DXGI_FORMAT_B8G8R8A8_UNORM;

	default:
		return DXGI_FORMAT_UNKNOWN;
	}

	return DXGI_FORMAT_UNKNOWN;
}

uint32 DeviceFormats::GetWriteMask(TextureFormat format)
{
	switch (format)
	{
	case TextureFormat::R8G8B8A8:
		return D3D11_COLOR_WRITE_ENABLE_ALL;
	case TextureFormat::R8G8B8A8S:
		return D3D11_COLOR_WRITE_ENABLE_ALL;

	case TextureFormat::A8:
		return D3D11_COLOR_WRITE_ENABLE_ALPHA;
	case TextureFormat::R8:
	case TextureFormat::R8S:
	case TextureFormat::R16:
	case TextureFormat::R16S:
	case TextureFormat::R16F:
	case TextureFormat::R32F:
		return D3D11_COLOR_WRITE_ENABLE_RED;
	case TextureFormat::R8G8:
	case TextureFormat::R8G8S:
	case TextureFormat::R16G16:
	case TextureFormat::R16G16S:
	case TextureFormat::R16G16F:
	case TextureFormat::R32G32F:
		return D3D11_COLOR_WRITE_ENABLE_RED | D3D11_COLOR_WRITE_ENABLE_GREEN;
	case TextureFormat::R16G16B16A16:
	case TextureFormat::R16G16B16A16S:
	case TextureFormat::R16G16B16A16F:
	case TextureFormat::R32G32B32A32F:
		return D3D11_COLOR_WRITE_ENABLE_ALL;

	case TextureFormat::BC1:
		return D3D11_COLOR_WRITE_ENABLE_RED | D3D11_COLOR_WRITE_ENABLE_GREEN | D3D11_COLOR_WRITE_ENABLE_BLUE;
	case TextureFormat::BC2:
	case TextureFormat::BC3:
		return D3D11_COLOR_WRITE_ENABLE_ALL;
	case TextureFormat::BC4U:
	case TextureFormat::BC4S:
		return D3D11_COLOR_WRITE_ENABLE_RED;
	case TextureFormat::BC5U:
	case TextureFormat::BC5S:
		return D3D11_COLOR_WRITE_ENABLE_RED | D3D11_COLOR_WRITE_ENABLE_GREEN;
	case TextureFormat::BC6UH:
	case TextureFormat::BC6SH:
		return D3D11_COLOR_WRITE_ENABLE_RED | D3D11_COLOR_WRITE_ENABLE_GREEN | D3D11_COLOR_WRITE_ENABLE_BLUE;
	case TextureFormat::BC7:
		return D3D11_COLOR_WRITE_ENABLE_ALL;
	case TextureFormat::D16:
		return D3D11_COLOR_WRITE_ENABLE_RED;
	case TextureFormat::D24S8:
		return D3D11_COLOR_WRITE_ENABLE_RED | D3D11_COLOR_WRITE_ENABLE_GREEN;
	case TextureFormat::D32F:
		return D3D11_COLOR_WRITE_ENABLE_RED;
	case TextureFormat::D32FS8:
		return D3D11_COLOR_WRITE_ENABLE_RED | D3D11_COLOR_WRITE_ENABLE_GREEN;

		// only available as hardware format under DX9
	case TextureFormat::B8G8R8:
		return 0;
	case TextureFormat::B8G8R8X8:
		return D3D11_COLOR_WRITE_ENABLE_RED | D3D11_COLOR_WRITE_ENABLE_GREEN | D3D11_COLOR_WRITE_ENABLE_BLUE;
	case TextureFormat::B8G8R8A8:
		return D3D11_COLOR_WRITE_ENABLE_ALL;

	default:
		return 0;
	}

	return 0;
}

uint32 DeviceFormats::GetWriteMask(DXGIFormat format)
{
	return GetWriteMask(ConvertToTexFormat(format));
}

TextureFormat DeviceFormats::ConvertToTexFormat(DXGIFormat format)
{
	switch (format)
	{
	case DXGI_FORMAT_R8G8B8A8_TYPELESS:
		return TextureFormat::R8G8B8A8;
	case DXGI_FORMAT_R8G8B8A8_UNORM:
		return TextureFormat::R8G8B8A8;
	case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
		return TextureFormat::R8G8B8A8;
	case DXGI_FORMAT_R8G8B8A8_SNORM:
		return TextureFormat::R8G8B8A8S;

	case DXGI_FORMAT_A8_UNORM:
		return TextureFormat::A8;
	case DXGI_FORMAT_R8_UNORM:
		return TextureFormat::R8;
	case DXGI_FORMAT_R8_SNORM:
		return TextureFormat::R8S;
	case DXGI_FORMAT_R8_TYPELESS:
		return TextureFormat::R8;
	case DXGI_FORMAT_R16_UNORM:
		return TextureFormat::R16;
	case DXGI_FORMAT_R16_SNORM:
		return TextureFormat::R16S;
	case DXGI_FORMAT_R16_FLOAT:
		return TextureFormat::R16F;
	case DXGI_FORMAT_R16_TYPELESS:
		return TextureFormat::R16F;
	case DXGI_FORMAT_R32_FLOAT:
		return TextureFormat::R32F;
	case DXGI_FORMAT_R32_TYPELESS:
		return TextureFormat::R32F;
	case DXGI_FORMAT_R8G8_UNORM:
		return TextureFormat::R8G8;
	case DXGI_FORMAT_R8G8_SNORM:
		return TextureFormat::R8G8S;
	case DXGI_FORMAT_R16G16_UNORM:
		return TextureFormat::R16G16;
	case DXGI_FORMAT_R16G16_SNORM:
		return TextureFormat::R16G16S;
	case DXGI_FORMAT_R16G16_FLOAT:
		return TextureFormat::R16G16F;
	case DXGI_FORMAT_R32G32_FLOAT:
		return TextureFormat::R32G32F;
	case DXGI_FORMAT_R11G11B10_FLOAT:
		return TextureFormat::R16G16B16A16;
	case DXGI_FORMAT_R16G16B16A16_SNORM:
		return TextureFormat::R16G16B16A16S;
	case DXGI_FORMAT_R16G16B16A16_FLOAT:
		return TextureFormat::R16G16B16A16F;
	case DXGI_FORMAT_R32G32B32A32_FLOAT:
		return TextureFormat::R32G32B32A32F;
	case DXGI_FORMAT_R32G32B32A32_TYPELESS:
		return TextureFormat::R32G32B32A32F;

	case DXGI_FORMAT_BC1_TYPELESS:
		return TextureFormat::BC1;
	case DXGI_FORMAT_BC1_UNORM:
		return TextureFormat::BC1;
	case DXGI_FORMAT_BC1_UNORM_SRGB:
		return TextureFormat::BC1;
	case DXGI_FORMAT_BC2_TYPELESS:
		return TextureFormat::BC2;
	case DXGI_FORMAT_BC2_UNORM:
		return TextureFormat::BC2;
	case DXGI_FORMAT_BC2_UNORM_SRGB:
		return TextureFormat::BC2;
	case DXGI_FORMAT_BC3_TYPELESS:
		return TextureFormat::BC3;
	case DXGI_FORMAT_BC3_UNORM:
		return TextureFormat::BC3;
	case DXGI_FORMAT_BC3_UNORM_SRGB:
		return TextureFormat::BC3;
	case DXGI_FORMAT_BC4_TYPELESS:
		return TextureFormat::BC4U;
	case DXGI_FORMAT_BC4_UNORM:
		return TextureFormat::BC4U;
	case DXGI_FORMAT_BC4_SNORM:
		return TextureFormat::BC4S;
	case DXGI_FORMAT_BC5_TYPELESS:
		return TextureFormat::BC5U;
	case DXGI_FORMAT_BC5_UNORM:
		return TextureFormat::BC5U;
	case DXGI_FORMAT_BC5_SNORM:
		return TextureFormat::BC5S;
	case DXGI_FORMAT_BC6H_UF16:
		return TextureFormat::BC6UH;
	case DXGI_FORMAT_BC6H_SF16:
		return TextureFormat::BC6SH;
	case DXGI_FORMAT_BC7_TYPELESS:
		return TextureFormat::BC7;
	case DXGI_FORMAT_BC7_UNORM:
		return TextureFormat::BC7;
	case DXGI_FORMAT_BC7_UNORM_SRGB:
		return TextureFormat::BC7;
	case DXGI_FORMAT_D16_UNORM:
		return TextureFormat::D16;
	case DXGI_FORMAT_D24_UNORM_S8_UINT:
		return TextureFormat::D24S8;
	case DXGI_FORMAT_D32_FLOAT:
		return TextureFormat::D32F;
	case DXGI_FORMAT_D32_FLOAT_S8X24_UINT:
		return TextureFormat::D32FS8;
	case DXGI_FORMAT_R24G8_TYPELESS:
	case DXGI_FORMAT_X24_TYPELESS_G8_UINT:
	case DXGI_FORMAT_R24_UNORM_X8_TYPELESS:
		return TextureFormat::D24S8;
	case DXGI_FORMAT_R32G8X24_TYPELESS:
	case DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS:
	case DXGI_FORMAT_X32_TYPELESS_G8X24_UINT:
		return TextureFormat::D32FS8;
		// only available as hardware format under DX9
	case DXGI_FORMAT_B8G8R8A8_TYPELESS:
	case DXGI_FORMAT_B8G8R8A8_UNORM:
	case DXGI_FORMAT_B8G8R8A8_UNORM_SRGB:
		return TextureFormat::B8G8R8A8;
	case DXGI_FORMAT_B8G8R8X8_TYPELESS:
	case DXGI_FORMAT_B8G8R8X8_UNORM:
	case DXGI_FORMAT_B8G8R8X8_UNORM_SRGB:
		return TextureFormat::B8G8R8X8;

	default:
		assert(0);
	}

	return TextureFormat::Unknown;
}

DXGIFormat DeviceFormats::ConvertToDepthStencil(DXGIFormat format)
{
	switch (format)
	{
	case DXGI_FORMAT_R16_TYPELESS:
	case DXGI_FORMAT_R16_UNORM:
	case DXGI_FORMAT_D16_UNORM:
		return DXGI_FORMAT_D16_UNORM;
	case DXGI_FORMAT_R24G8_TYPELESS:
	case DXGI_FORMAT_D24_UNORM_S8_UINT:
		return DXGI_FORMAT_D24_UNORM_S8_UINT;
	case DXGI_FORMAT_R32_TYPELESS:
	case DXGI_FORMAT_R32_FLOAT:
	case DXGI_FORMAT_D32_FLOAT:
		return DXGI_FORMAT_D32_FLOAT;
	case DXGI_FORMAT_R32G8X24_TYPELESS:
	case DXGI_FORMAT_D32_FLOAT_S8X24_UINT:
		return DXGI_FORMAT_D32_FLOAT_S8X24_UINT;
	default:
		assert(0);
	}

	return DXGI_FORMAT_UNKNOWN;
}

DXGIFormat DeviceFormats::ConvertToStencilOnly(DXGIFormat format)
{
	switch (format)
	{
	case DXGI_FORMAT_R16_TYPELESS:
	case DXGI_FORMAT_R16_UNORM:
	case DXGI_FORMAT_D16_UNORM:
		return DXGI_FORMAT_UNKNOWN;
	case DXGI_FORMAT_R24G8_TYPELESS:
	case DXGI_FORMAT_X24_TYPELESS_G8_UINT:
	case DXGI_FORMAT_D24_UNORM_S8_UINT:
		return DXGI_FORMAT_X24_TYPELESS_G8_UINT;
	case DXGI_FORMAT_R32_TYPELESS:
	case DXGI_FORMAT_R32_FLOAT:
	case DXGI_FORMAT_D32_FLOAT:
		return DXGI_FORMAT_UNKNOWN;
	case DXGI_FORMAT_R32G8X24_TYPELESS:
	case DXGI_FORMAT_X32_TYPELESS_G8X24_UINT:
	case DXGI_FORMAT_D32_FLOAT_S8X24_UINT:
		return DXGI_FORMAT_X32_TYPELESS_G8X24_UINT;
	default:
		assert(0);
	}
	return DXGI_FORMAT_UNKNOWN;
}

DXGIFormat DeviceFormats::ConvertToDepthOnly(DXGIFormat format)
{
	//handle special cases
	switch (format)
	{
	case DXGI_FORMAT_R16_TYPELESS:
	case DXGI_FORMAT_R16_UNORM:
	case DXGI_FORMAT_D16_UNORM:
		return DXGI_FORMAT_R16_UNORM;
	case DXGI_FORMAT_R24G8_TYPELESS:
	case DXGI_FORMAT_R24_UNORM_X8_TYPELESS:
	case DXGI_FORMAT_D24_UNORM_S8_UINT:
		return DXGI_FORMAT_R24_UNORM_X8_TYPELESS;
	case DXGI_FORMAT_R32_TYPELESS:
	case DXGI_FORMAT_R32_FLOAT:
	case DXGI_FORMAT_D32_FLOAT:
		return DXGI_FORMAT_R32_FLOAT;
	case DXGI_FORMAT_R32G8X24_TYPELESS:
	case DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS:
	case DXGI_FORMAT_D32_FLOAT_S8X24_UINT:
		return DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS;
	default:
		assert(0);
	}
	return DXGI_FORMAT_UNKNOWN;
}

DXGIFormat DeviceFormats::ConvertToSRGB(DXGIFormat format)
{
	switch (format)
	{
	case DXGI_FORMAT_R8G8B8A8_UNORM:
		return DXGI_FORMAT_R8G8B8A8_UNORM_SRGB;
	case DXGI_FORMAT_B8G8R8A8_UNORM:
		return DXGI_FORMAT_B8G8R8A8_UNORM_SRGB;
	case DXGI_FORMAT_B8G8R8X8_UNORM:
		return DXGI_FORMAT_B8G8R8X8_UNORM_SRGB;
	case DXGI_FORMAT_BC1_UNORM:
		return DXGI_FORMAT_BC1_UNORM_SRGB;
	case DXGI_FORMAT_BC2_UNORM:
		return DXGI_FORMAT_BC2_UNORM_SRGB;
	case DXGI_FORMAT_BC3_UNORM:
		return DXGI_FORMAT_BC3_UNORM_SRGB;
	case DXGI_FORMAT_BC7_UNORM:
		return DXGI_FORMAT_BC7_UNORM_SRGB;
	case DXGI_FORMAT_R16G16B16A16_FLOAT:
		return DXGI_FORMAT_R16G16B16A16_FLOAT;
	case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
	case DXGI_FORMAT_B8G8R8A8_UNORM_SRGB:
	case DXGI_FORMAT_B8G8R8X8_UNORM_SRGB:
	case DXGI_FORMAT_BC1_UNORM_SRGB:
	case DXGI_FORMAT_BC2_UNORM_SRGB:
	case DXGI_FORMAT_BC3_UNORM_SRGB:
	case DXGI_FORMAT_BC7_UNORM_SRGB:
		break;
	default:
		assert(0);
	}
	return format;
}

DXGIFormat DeviceFormats::ConvertToSigned(DXGIFormat format)
{
	switch (format)
	{
	case DXGI_FORMAT_R8_TYPELESS:
	case DXGI_FORMAT_R8_UNORM:
		return DXGI_FORMAT_R8_SNORM;
	case DXGI_FORMAT_R8G8_TYPELESS:
	case DXGI_FORMAT_R8G8_UNORM:
		return DXGI_FORMAT_R8G8_SNORM;
	case DXGI_FORMAT_R8G8B8A8_TYPELESS:
	case DXGI_FORMAT_R8G8B8A8_UNORM:
		return DXGI_FORMAT_R8G8B8A8_SNORM;
	case DXGI_FORMAT_R16_TYPELESS:
	case DXGI_FORMAT_R16_UNORM:
		return DXGI_FORMAT_R16_SNORM;
	case DXGI_FORMAT_R16G16_TYPELESS:
	case DXGI_FORMAT_R16G16_UNORM:
		return DXGI_FORMAT_R16G16_SNORM;
	case DXGI_FORMAT_R16G16B16A16_TYPELESS:
	case DXGI_FORMAT_R16G16B16A16_UNORM:
		return DXGI_FORMAT_R16G16B16A16_SNORM;
	case DXGI_FORMAT_BC4_TYPELESS:
	case DXGI_FORMAT_BC4_UNORM:
		return DXGI_FORMAT_BC4_SNORM;
	case DXGI_FORMAT_BC5_TYPELESS:
	case DXGI_FORMAT_BC5_UNORM:
		return DXGI_FORMAT_BC5_SNORM;
	case DXGI_FORMAT_BC6H_TYPELESS:
	case DXGI_FORMAT_BC6H_UF16:
		return DXGI_FORMAT_BC6H_SF16;
	case DXGI_FORMAT_R8_UINT:
		return DXGI_FORMAT_R8_SINT;
	case DXGI_FORMAT_R8G8_UINT:
		return DXGI_FORMAT_R8G8_SINT;
	case DXGI_FORMAT_R8G8B8A8_UINT:
		return DXGI_FORMAT_R8G8B8A8_SINT;
	case DXGI_FORMAT_R16_UINT:
		return DXGI_FORMAT_R16_SINT;
	case DXGI_FORMAT_R16G16_UINT:
		return DXGI_FORMAT_R16G16_SINT;
	case DXGI_FORMAT_R16G16B16A16_UINT:
		return DXGI_FORMAT_R16G16B16A16_SINT;
	case DXGI_FORMAT_R32_TYPELESS:
	case DXGI_FORMAT_R32_UINT:
		return DXGI_FORMAT_R32_SINT;
	case DXGI_FORMAT_R32G32_TYPELESS:
	case DXGI_FORMAT_R32G32_UINT:
		return DXGI_FORMAT_R32G32_SINT;
	case DXGI_FORMAT_R32G32B32_TYPELESS:
	case DXGI_FORMAT_R32G32B32_UINT:
		return DXGI_FORMAT_R32G32B32_SINT;
	case DXGI_FORMAT_R32G32B32A32_TYPELESS:
	case DXGI_FORMAT_R32G32B32A32_UINT:
		return DXGI_FORMAT_R32G32B32A32_SINT;
	default:
		assert(0);
	}
	return format;
}

DXGIFormat DeviceFormats::ConvertToUnsigned(DXGIFormat format)
{
	switch (format)
	{
	case DXGI_FORMAT_R8_TYPELESS:
	case DXGI_FORMAT_R8_SNORM:
		return DXGI_FORMAT_R8_UNORM;
	case DXGI_FORMAT_R8G8_TYPELESS:
	case DXGI_FORMAT_R8G8_SNORM:
		return DXGI_FORMAT_R8G8_UNORM;
	case DXGI_FORMAT_R8G8B8A8_TYPELESS:
	case DXGI_FORMAT_R8G8B8A8_SNORM:
		return DXGI_FORMAT_R8G8B8A8_UNORM;
	case DXGI_FORMAT_R10G10B10A2_TYPELESS:
		return DXGI_FORMAT_R10G10B10A2_UNORM;
	case DXGI_FORMAT_R16_TYPELESS:
	case DXGI_FORMAT_R16_SNORM:
		return DXGI_FORMAT_R16_UNORM;
	case DXGI_FORMAT_R16G16_TYPELESS:
	case DXGI_FORMAT_R16G16_SNORM:
		return DXGI_FORMAT_R16G16_UNORM;
	case DXGI_FORMAT_R16G16B16A16_TYPELESS:
	case DXGI_FORMAT_R16G16B16A16_SNORM:
		return DXGI_FORMAT_R16G16B16A16_UNORM;
	case DXGI_FORMAT_BC4_TYPELESS:
	case DXGI_FORMAT_BC4_SNORM:
		return DXGI_FORMAT_BC4_UNORM;
	case DXGI_FORMAT_BC5_TYPELESS:
	case DXGI_FORMAT_BC5_SNORM:
		return DXGI_FORMAT_BC5_UNORM;
	case DXGI_FORMAT_BC6H_TYPELESS:
	case DXGI_FORMAT_BC6H_SF16:
		return DXGI_FORMAT_BC6H_UF16;
	case DXGI_FORMAT_R16_SINT:
		return DXGI_FORMAT_R16_UINT;
	case DXGI_FORMAT_R16G16_SINT:
		return DXGI_FORMAT_R16G16_UINT;
	case DXGI_FORMAT_R16G16B16A16_SINT:
		return DXGI_FORMAT_R16G16B16A16_UINT;
	case DXGI_FORMAT_R8_SINT:
		return DXGI_FORMAT_R8_UINT;
	case DXGI_FORMAT_R8G8_SINT:
		return DXGI_FORMAT_R8G8_UINT;
	case DXGI_FORMAT_R8G8B8A8_SINT:
		return DXGI_FORMAT_R8G8B8A8_UINT;
	case DXGI_FORMAT_R32_TYPELESS:
	case DXGI_FORMAT_R32_SINT:
		return DXGI_FORMAT_R32_UINT;
	case DXGI_FORMAT_R32G32_TYPELESS:
	case DXGI_FORMAT_R32G32_SINT:
		return DXGI_FORMAT_R32G32_UINT;
	case DXGI_FORMAT_R32G32B32_TYPELESS:
	case DXGI_FORMAT_R32G32B32_SINT:
		return DXGI_FORMAT_R32G32B32_UINT;
	case DXGI_FORMAT_R32G32B32A32_TYPELESS:
	case DXGI_FORMAT_R32G32B32A32_SINT:
		return DXGI_FORMAT_R32G32B32A32_UINT;
	default:
		assert(0);
	}
	return format;
}

DXGIFormat DeviceFormats::ConvertToFloat(DXGIFormat format)
{
	switch (format)
	{
	case DXGI_FORMAT_R16_TYPELESS:
	case DXGI_FORMAT_R16_SNORM:
	case DXGI_FORMAT_R16_UNORM:
		//	case DXGI_FORMAT_R16_SINT:
		//	case DXGI_FORMAT_R16_UINT:
		return DXGI_FORMAT_R16_FLOAT;
	case DXGI_FORMAT_R16G16_TYPELESS:
	case DXGI_FORMAT_R16G16_SNORM:
	case DXGI_FORMAT_R16G16_UNORM:
		//	case DXGI_FORMAT_R16G16_SINT:
		//	case DXGI_FORMAT_R16G16_UINT:
		return DXGI_FORMAT_R16G16_FLOAT;
	case DXGI_FORMAT_R16G16B16A16_TYPELESS:
	case DXGI_FORMAT_R16G16B16A16_SNORM:
	case DXGI_FORMAT_R16G16B16A16_UNORM:
		//	case DXGI_FORMAT_R16G16B16A16_SINT:
		//	case DXGI_FORMAT_R16G16B16A16_UINT:
		return DXGI_FORMAT_R16G16B16A16_FLOAT;

	case DXGI_FORMAT_R32_TYPELESS:
		//	case DXGI_FORMAT_R32_SINT:
		//	case DXGI_FORMAT_R32_UINT:
		return DXGI_FORMAT_R32_FLOAT;
	case DXGI_FORMAT_R32G32_TYPELESS:
		//	case DXGI_FORMAT_R32G32_SINT:
		//	case DXGI_FORMAT_R32G32_UINT:
		return DXGI_FORMAT_R32G32_FLOAT;
	case DXGI_FORMAT_R32G32B32_TYPELESS:
		//	case DXGI_FORMAT_R32G32B32_SINT:
		//	case DXGI_FORMAT_R32G32B32_UINT:
		return DXGI_FORMAT_R32G32B32_FLOAT;
	case DXGI_FORMAT_R32G32B32A32_TYPELESS:
		//	case DXGI_FORMAT_R32G32B32A32_SINT:
		//	case DXGI_FORMAT_R32G32B32A32_UINT:
		return DXGI_FORMAT_R32G32B32A32_FLOAT;

	default:
		assert(0);
	}

	return format;
}

DXGIFormat DeviceFormats::ConvertToTypeless(DXGIFormat format)
{
	switch (format)
	{
	case DXGI_FORMAT_R8G8B8A8_UNORM:
		return DXGI_FORMAT_R8G8B8A8_TYPELESS;
	case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
		return DXGI_FORMAT_R8G8B8A8_TYPELESS;
	case DXGI_FORMAT_R8G8B8A8_SNORM:
		return DXGI_FORMAT_R8G8B8A8_TYPELESS;
	case DXGI_FORMAT_R8G8B8A8_UINT:
		return DXGI_FORMAT_R8G8B8A8_TYPELESS;
	case DXGI_FORMAT_R8G8B8A8_SINT:
		return DXGI_FORMAT_R8G8B8A8_TYPELESS;

	case DXGI_FORMAT_R8_UNORM:
		return DXGI_FORMAT_R8_TYPELESS;
	case DXGI_FORMAT_R8_SNORM:
		return DXGI_FORMAT_R8_TYPELESS;
	case DXGI_FORMAT_R8_UINT:
		return DXGI_FORMAT_R8_TYPELESS;
	case DXGI_FORMAT_R8_SINT:
		return DXGI_FORMAT_R8_TYPELESS;

	case DXGI_FORMAT_R16_UNORM:
		return DXGI_FORMAT_R16_TYPELESS;
	case DXGI_FORMAT_R16_SNORM:
		return DXGI_FORMAT_R16_TYPELESS;
	case DXGI_FORMAT_R16_FLOAT:
		return DXGI_FORMAT_R16_TYPELESS;
	case DXGI_FORMAT_R16_UINT:
		return DXGI_FORMAT_R16_TYPELESS;
	case DXGI_FORMAT_R16_SINT:
		return DXGI_FORMAT_R16_TYPELESS;

	case DXGI_FORMAT_R32_FLOAT:
		return DXGI_FORMAT_R32_TYPELESS;
	case DXGI_FORMAT_R32_UINT:
		return DXGI_FORMAT_R32_TYPELESS;
	case DXGI_FORMAT_R32_SINT:
		return DXGI_FORMAT_R32_TYPELESS;

	case DXGI_FORMAT_R8G8_UNORM:
		return DXGI_FORMAT_R8G8_TYPELESS;
	case DXGI_FORMAT_R8G8_SNORM:
		return DXGI_FORMAT_R8G8_TYPELESS;
	case DXGI_FORMAT_R8G8_UINT:
		return DXGI_FORMAT_R8G8_TYPELESS;
	case DXGI_FORMAT_R8G8_SINT:
		return DXGI_FORMAT_R8G8_TYPELESS;

	case DXGI_FORMAT_R16G16_FLOAT:
		return DXGI_FORMAT_R16G16_TYPELESS;
	case DXGI_FORMAT_R16G16_UNORM:
		return DXGI_FORMAT_R16G16_TYPELESS;
	case DXGI_FORMAT_R16G16_SNORM:
		return DXGI_FORMAT_R16G16_TYPELESS;
	case DXGI_FORMAT_R16G16_UINT:
		return DXGI_FORMAT_R16G16_TYPELESS;
	case DXGI_FORMAT_R16G16_SINT:
		return DXGI_FORMAT_R16G16_TYPELESS;

	case DXGI_FORMAT_R32G32_FLOAT:
		return DXGI_FORMAT_R32G32_TYPELESS;
	case DXGI_FORMAT_R32G32_UINT:
		return DXGI_FORMAT_R32G32_TYPELESS;
	case DXGI_FORMAT_R32G32_SINT:
		return DXGI_FORMAT_R32G32_TYPELESS;

	case DXGI_FORMAT_R32G32B32_FLOAT:
		return DXGI_FORMAT_R32G32B32_TYPELESS;
	case DXGI_FORMAT_R32G32B32_UINT:
		return DXGI_FORMAT_R32G32B32_TYPELESS;
	case DXGI_FORMAT_R32G32B32_SINT:
		return DXGI_FORMAT_R32G32B32_TYPELESS;

	case DXGI_FORMAT_R10G10B10A2_UNORM:
		return DXGI_FORMAT_R10G10B10A2_TYPELESS;
	case DXGI_FORMAT_R10G10B10A2_UINT:
		return DXGI_FORMAT_R10G10B10A2_TYPELESS;

	case DXGI_FORMAT_R16G16B16A16_FLOAT:
		return DXGI_FORMAT_R16G16B16A16_TYPELESS;
	case DXGI_FORMAT_R16G16B16A16_UNORM:
		return DXGI_FORMAT_R16G16B16A16_TYPELESS;
	case DXGI_FORMAT_R16G16B16A16_SNORM:
		return DXGI_FORMAT_R16G16B16A16_TYPELESS;
	case DXGI_FORMAT_R16G16B16A16_UINT:
		return DXGI_FORMAT_R16G16B16A16_TYPELESS;
	case DXGI_FORMAT_R16G16B16A16_SINT:
		return DXGI_FORMAT_R16G16B16A16_TYPELESS;

	case DXGI_FORMAT_R32G32B32A32_FLOAT:
		return DXGI_FORMAT_R32G32B32A32_TYPELESS;
	case DXGI_FORMAT_R32G32B32A32_UINT:
		return DXGI_FORMAT_R32G32B32A32_TYPELESS;
	case DXGI_FORMAT_R32G32B32A32_SINT:
		return DXGI_FORMAT_R32G32B32A32_TYPELESS;

	case DXGI_FORMAT_BC1_UNORM:
		return DXGI_FORMAT_BC1_TYPELESS;
	case DXGI_FORMAT_BC1_UNORM_SRGB:
		return DXGI_FORMAT_BC1_TYPELESS;

	case DXGI_FORMAT_BC2_UNORM:
		return DXGI_FORMAT_BC2_TYPELESS;
	case DXGI_FORMAT_BC2_UNORM_SRGB:
		return DXGI_FORMAT_BC2_TYPELESS;

	case DXGI_FORMAT_BC3_UNORM:
		return DXGI_FORMAT_BC3_TYPELESS;
	case DXGI_FORMAT_BC3_UNORM_SRGB:
		return DXGI_FORMAT_BC3_TYPELESS;

	case DXGI_FORMAT_BC4_UNORM:
		return DXGI_FORMAT_BC4_TYPELESS;
	case DXGI_FORMAT_BC4_SNORM:
		return DXGI_FORMAT_BC4_TYPELESS;

	case DXGI_FORMAT_BC5_UNORM:
		return DXGI_FORMAT_BC5_TYPELESS;
	case DXGI_FORMAT_BC5_SNORM:
		return DXGI_FORMAT_BC5_TYPELESS;

#if !PLATFORM_ORBIS
	case DXGI_FORMAT_BC6H_UF16:
		return DXGI_FORMAT_BC6H_TYPELESS;
	case DXGI_FORMAT_BC6H_SF16:
		return DXGI_FORMAT_BC6H_TYPELESS;
#endif
	case DXGI_FORMAT_BC7_UNORM:
		return DXGI_FORMAT_BC7_TYPELESS;
	case DXGI_FORMAT_BC7_UNORM_SRGB:
		return DXGI_FORMAT_BC7_TYPELESS;

	case DXGI_FORMAT_D16_UNORM:
		return DXGI_FORMAT_R16_TYPELESS;
	case DXGI_FORMAT_D24_UNORM_S8_UINT:
		return DXGI_FORMAT_R24G8_TYPELESS;
	case DXGI_FORMAT_D32_FLOAT:
		return DXGI_FORMAT_R32_TYPELESS;
	case DXGI_FORMAT_D32_FLOAT_S8X24_UINT:
		return DXGI_FORMAT_R32G8X24_TYPELESS;

	default:
		if (!IsTypeless(format))
		{
			// todo: add missing formats if they found required
			assert(0);
		}
	}

	return format;
}

UINT DeviceFormats::GetStride(DXGIFormat format)
{
	switch (format)
	{
	default:
	case DXGI_FORMAT_UNKNOWN:
		return 0;
		break;

	case DXGI_FORMAT_R32G32B32A32_TYPELESS:
	case DXGI_FORMAT_R32G32B32A32_FLOAT:
	case DXGI_FORMAT_R32G32B32A32_UINT:
	case DXGI_FORMAT_R32G32B32A32_SINT:
		return 4 * sizeof(float);
		break;

	case DXGI_FORMAT_R32G32B32_TYPELESS:
	case DXGI_FORMAT_R32G32B32_FLOAT:
	case DXGI_FORMAT_R32G32B32_UINT:
	case DXGI_FORMAT_R32G32B32_SINT:
		return 3 * sizeof(float);
		break;

	case DXGI_FORMAT_R16G16B16A16_TYPELESS:
	case DXGI_FORMAT_R16G16B16A16_FLOAT:
	case DXGI_FORMAT_R16G16B16A16_UNORM:
	case DXGI_FORMAT_R16G16B16A16_UINT:
	case DXGI_FORMAT_R16G16B16A16_SNORM:
	case DXGI_FORMAT_R16G16B16A16_SINT:
		return 4 * sizeof(short);
		break;

	case DXGI_FORMAT_R32G32_TYPELESS:
	case DXGI_FORMAT_R32G32_FLOAT:
	case DXGI_FORMAT_R32G32_UINT:
	case DXGI_FORMAT_R32G32_SINT:
		return 2 * sizeof(float);
		break;

	case DXGI_FORMAT_R32G8X24_TYPELESS:
	case DXGI_FORMAT_D32_FLOAT_S8X24_UINT:
	case DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS:
	case DXGI_FORMAT_X32_TYPELESS_G8X24_UINT:
		return 2 * sizeof(float);
		break;

	case DXGI_FORMAT_R10G10B10A2_TYPELESS:
	case DXGI_FORMAT_R10G10B10A2_UNORM:
	case DXGI_FORMAT_R10G10B10A2_UINT:
	case DXGI_FORMAT_R11G11B10_FLOAT:
	case DXGI_FORMAT_R8G8B8A8_TYPELESS:
	case DXGI_FORMAT_R8G8B8A8_UNORM:
	case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
	case DXGI_FORMAT_R8G8B8A8_UINT:
	case DXGI_FORMAT_R8G8B8A8_SNORM:
	case DXGI_FORMAT_R8G8B8A8_SINT:
		return 4 * sizeof(char);
		break;

	case DXGI_FORMAT_R16G16_TYPELESS:
	case DXGI_FORMAT_R16G16_FLOAT:
	case DXGI_FORMAT_R16G16_UNORM:
	case DXGI_FORMAT_R16G16_UINT:
	case DXGI_FORMAT_R16G16_SNORM:
	case DXGI_FORMAT_R16G16_SINT:
		return 2 * sizeof(short);
		break;

	case DXGI_FORMAT_R32_TYPELESS:
	case DXGI_FORMAT_D32_FLOAT:
	case DXGI_FORMAT_R32_FLOAT:
	case DXGI_FORMAT_R32_UINT:
	case DXGI_FORMAT_R32_SINT:
		return 1 * sizeof(float);
		break;

#if RENDERER_VK
	case DXGI_FORMAT_D16_UNORM_S8_UINT:
	case DXGI_FORMAT_R16G8X8_TYPELESS:
	case DXGI_FORMAT_D24_UNORM:
	case DXGI_FORMAT_R24X8_TYPELESS:
#endif
	case DXGI_FORMAT_R24G8_TYPELESS:
	case DXGI_FORMAT_D24_UNORM_S8_UINT:
	case DXGI_FORMAT_R24_UNORM_X8_TYPELESS:
	case DXGI_FORMAT_X24_TYPELESS_G8_UINT:
	case DXGI_FORMAT_R9G9B9E5_SHAREDEXP:
	case DXGI_FORMAT_R8G8_B8G8_UNORM:
	case DXGI_FORMAT_G8R8_G8B8_UNORM:
	case DXGI_FORMAT_B8G8R8A8_UNORM:
	case DXGI_FORMAT_B8G8R8A8_UNORM_SRGB:
	case DXGI_FORMAT_B8G8R8X8_UNORM:
	case DXGI_FORMAT_B8G8R8X8_UNORM_SRGB:
		return 4 * sizeof(char);
		break;

	case DXGI_FORMAT_R8G8_TYPELESS:
	case DXGI_FORMAT_R8G8_UNORM:
	case DXGI_FORMAT_R8G8_UINT:
	case DXGI_FORMAT_R8G8_SNORM:
	case DXGI_FORMAT_R8G8_SINT:
		return 2 * sizeof(char);
		break;

	case DXGI_FORMAT_R16_TYPELESS:
	case DXGI_FORMAT_R16_FLOAT:
	case DXGI_FORMAT_D16_UNORM:
	case DXGI_FORMAT_R16_UNORM:
	case DXGI_FORMAT_R16_UINT:
	case DXGI_FORMAT_R16_SNORM:
	case DXGI_FORMAT_R16_SINT:
		return 1 * sizeof(short);
		break;

	case DXGI_FORMAT_B5G6R5_UNORM:
	case DXGI_FORMAT_B5G5R5A1_UNORM:
		return 1 * sizeof(short);
		break;

	case DXGI_FORMAT_R8_TYPELESS:
	case DXGI_FORMAT_R8_UNORM:
	case DXGI_FORMAT_R8_UINT:
	case DXGI_FORMAT_R8_SNORM:
	case DXGI_FORMAT_R8_SINT:
#if RENDERER_VK
	case DXGI_FORMAT_S8_UINT:
#endif
	case DXGI_FORMAT_A8_UNORM:
		return 1 * sizeof(char);
		break;

	case DXGI_FORMAT_R1_UNORM:
		return 1 * sizeof(char);
		break;
	}

	return 0;
}

void DeviceFormats::GetSurfaceInfo(uint16 w, uint16 h, TextureFormat format, size_t* outBytesCount, size_t* outRowBytes, size_t* outRowsNum)
{
	size_t numBytes = 0;
	size_t rowBytes = 0;
	size_t numRows = 0;

	bool bc = false;
	size_t bpe = 0;

	switch (format)
	{
	case TextureFormat::BC1:
	case TextureFormat::BC4S:
	case TextureFormat::BC4U:
		bc = true;
		bpe = 8;
		break;

	case TextureFormat::BC2:
	case TextureFormat::BC3:
	case TextureFormat::BC5S:
	case TextureFormat::BC5U:
	case TextureFormat::BC6SH:
	case TextureFormat::BC6UH:
	case TextureFormat::BC7:
		bc = true;
		bpe = 16;
		break;
	}

	if (bc)
	{
		size_t numBlocksWide = 0;
		if (w > 0)
			numBlocksWide = std::max<size_t>(1, (w + 3) / 4);

		size_t numBlocksHigh = 0;
		if (h > 0)
			numBlocksHigh = std::max<size_t>(1, (h + 3) / 4);

		rowBytes = numBlocksWide * bpe;
		numRows = numBlocksHigh;
		numBytes = rowBytes * numBlocksHigh;
	}
	else
	{
		size_t bpp = BitsPerPixel(format);
		rowBytes = (w * bpp + 7) / 8; // round up to nearest byte
		numRows = h;
		numBytes = rowBytes * h;
	}

	if (outBytesCount)
		*outBytesCount = numBytes;
	if (outRowBytes)
		*outRowBytes = rowBytes;
	if (outRowsNum)
		*outRowsNum = numRows;
}

size_t DeviceFormats::BitsPerPixel(TextureFormat format)
{
	switch (ConvertFromTexFormat(format))
	{
	case DXGI_FORMAT_R32G32B32A32_TYPELESS:
	case DXGI_FORMAT_R32G32B32A32_FLOAT:
	case DXGI_FORMAT_R32G32B32A32_UINT:
	case DXGI_FORMAT_R32G32B32A32_SINT:
		return 128;

	case DXGI_FORMAT_R32G32B32_TYPELESS:
	case DXGI_FORMAT_R32G32B32_FLOAT:
	case DXGI_FORMAT_R32G32B32_UINT:
	case DXGI_FORMAT_R32G32B32_SINT:
		return 96;

	case DXGI_FORMAT_R16G16B16A16_TYPELESS:
	case DXGI_FORMAT_R16G16B16A16_FLOAT:
	case DXGI_FORMAT_R16G16B16A16_UNORM:
	case DXGI_FORMAT_R16G16B16A16_UINT:
	case DXGI_FORMAT_R16G16B16A16_SNORM:
	case DXGI_FORMAT_R16G16B16A16_SINT:
	case DXGI_FORMAT_R32G32_TYPELESS:
	case DXGI_FORMAT_R32G32_FLOAT:
	case DXGI_FORMAT_R32G32_UINT:
	case DXGI_FORMAT_R32G32_SINT:
	case DXGI_FORMAT_R32G8X24_TYPELESS:
	case DXGI_FORMAT_D32_FLOAT_S8X24_UINT:
	case DXGI_FORMAT_R32_FLOAT_X8X24_TYPELESS:
	case DXGI_FORMAT_X32_TYPELESS_G8X24_UINT:
	case DXGI_FORMAT_Y416:
	case DXGI_FORMAT_Y210:
	case DXGI_FORMAT_Y216:
		return 64;

	case DXGI_FORMAT_R10G10B10A2_TYPELESS:
	case DXGI_FORMAT_R10G10B10A2_UNORM:
	case DXGI_FORMAT_R10G10B10A2_UINT:
	case DXGI_FORMAT_R11G11B10_FLOAT:
	case DXGI_FORMAT_R8G8B8A8_TYPELESS:
	case DXGI_FORMAT_R8G8B8A8_UNORM:
	case DXGI_FORMAT_R8G8B8A8_UNORM_SRGB:
	case DXGI_FORMAT_R8G8B8A8_UINT:
	case DXGI_FORMAT_R8G8B8A8_SNORM:
	case DXGI_FORMAT_R8G8B8A8_SINT:
	case DXGI_FORMAT_R16G16_TYPELESS:
	case DXGI_FORMAT_R16G16_FLOAT:
	case DXGI_FORMAT_R16G16_UNORM:
	case DXGI_FORMAT_R16G16_UINT:
	case DXGI_FORMAT_R16G16_SNORM:
	case DXGI_FORMAT_R16G16_SINT:
	case DXGI_FORMAT_R32_TYPELESS:
	case DXGI_FORMAT_D32_FLOAT:
	case DXGI_FORMAT_R32_FLOAT:
	case DXGI_FORMAT_R32_UINT:
	case DXGI_FORMAT_R32_SINT:
	case DXGI_FORMAT_R24G8_TYPELESS:
	case DXGI_FORMAT_D24_UNORM_S8_UINT:
	case DXGI_FORMAT_R24_UNORM_X8_TYPELESS:
	case DXGI_FORMAT_X24_TYPELESS_G8_UINT:
	case DXGI_FORMAT_R9G9B9E5_SHAREDEXP:
	case DXGI_FORMAT_R8G8_B8G8_UNORM:
	case DXGI_FORMAT_G8R8_G8B8_UNORM:
	case DXGI_FORMAT_B8G8R8A8_UNORM:
	case DXGI_FORMAT_B8G8R8X8_UNORM:
	case DXGI_FORMAT_R10G10B10_XR_BIAS_A2_UNORM:
	case DXGI_FORMAT_B8G8R8A8_TYPELESS:
	case DXGI_FORMAT_B8G8R8A8_UNORM_SRGB:
	case DXGI_FORMAT_B8G8R8X8_TYPELESS:
	case DXGI_FORMAT_B8G8R8X8_UNORM_SRGB:
	case DXGI_FORMAT_AYUV:
	case DXGI_FORMAT_Y410:
	case DXGI_FORMAT_YUY2:
		return 32;

	case DXGI_FORMAT_P010:
	case DXGI_FORMAT_P016:
		return 24;

	case DXGI_FORMAT_R8G8_TYPELESS:
	case DXGI_FORMAT_R8G8_UNORM:
	case DXGI_FORMAT_R8G8_UINT:
	case DXGI_FORMAT_R8G8_SNORM:
	case DXGI_FORMAT_R8G8_SINT:
	case DXGI_FORMAT_R16_TYPELESS:
	case DXGI_FORMAT_R16_FLOAT:
	case DXGI_FORMAT_D16_UNORM:
	case DXGI_FORMAT_R16_UNORM:
	case DXGI_FORMAT_R16_UINT:
	case DXGI_FORMAT_R16_SNORM:
	case DXGI_FORMAT_R16_SINT:
	case DXGI_FORMAT_B5G6R5_UNORM:
	case DXGI_FORMAT_B5G5R5A1_UNORM:
	case DXGI_FORMAT_A8P8:
	case DXGI_FORMAT_B4G4R4A4_UNORM:
		return 16;

	case DXGI_FORMAT_NV12:
	case DXGI_FORMAT_420_OPAQUE:
	case DXGI_FORMAT_NV11:
		return 12;

	case DXGI_FORMAT_R8_TYPELESS:
	case DXGI_FORMAT_R8_UNORM:
	case DXGI_FORMAT_R8_UINT:
	case DXGI_FORMAT_R8_SNORM:
	case DXGI_FORMAT_R8_SINT:
	case DXGI_FORMAT_A8_UNORM:
	case DXGI_FORMAT_AI44:
	case DXGI_FORMAT_IA44:
	case DXGI_FORMAT_P8:
		return 8;

	case DXGI_FORMAT_R1_UNORM:
		return 1;

	case DXGI_FORMAT_BC1_TYPELESS:
	case DXGI_FORMAT_BC1_UNORM:
	case DXGI_FORMAT_BC1_UNORM_SRGB:
	case DXGI_FORMAT_BC4_TYPELESS:
	case DXGI_FORMAT_BC4_UNORM:
	case DXGI_FORMAT_BC4_SNORM:
		return 4;

	case DXGI_FORMAT_BC2_TYPELESS:
	case DXGI_FORMAT_BC2_UNORM:
	case DXGI_FORMAT_BC2_UNORM_SRGB:
	case DXGI_FORMAT_BC3_TYPELESS:
	case DXGI_FORMAT_BC3_UNORM:
	case DXGI_FORMAT_BC3_UNORM_SRGB:
	case DXGI_FORMAT_BC5_TYPELESS:
	case DXGI_FORMAT_BC5_UNORM:
	case DXGI_FORMAT_BC5_SNORM:
	case DXGI_FORMAT_BC6H_TYPELESS:
	case DXGI_FORMAT_BC6H_UF16:
	case DXGI_FORMAT_BC6H_SF16:
	case DXGI_FORMAT_BC7_TYPELESS:
	case DXGI_FORMAT_BC7_UNORM:
	case DXGI_FORMAT_BC7_UNORM_SRGB:
		return 8;

	default:
		return 0;
	}
}
